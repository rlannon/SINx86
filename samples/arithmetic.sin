// arithmetic.sin
// some simple arithmetic tests

include "../../sinstdlib/src/header/math.sinh";

decl void print(decl string s);

def int main & long (alloc array<string> args &dynamic)
{
    // basic unsigned arithmetic
    alloc int a &unsigned: 30;
    alloc int b &unsigned: 50;
    alloc unsigned int c: a + b;

    // test bit shifts
    let c = c >> 8;

    // test our syntactic sugar
    let a *= 2;
    let b += 3;

    alloc int l &long: 1_000_000;   // test separator parsing
    alloc int l2 &long: 1;

    if (l = 1_000_000 as long int) {
        @print("l is 1,000,000\n");
    }

    alloc long int to_return;

    if ((l * 2 &long + l2 - 2_001_000 &long) = -999 &long) {
        @print("Works!\n");
        let to_return = 0;
    }
    else {
        @print("Arithmetic error.\n");
        let to_return = 1;
    }

    // test floating-point arithmetic
    alloc float f1: 1.234;
    alloc float f2: 1.234;
    if (f1 = f2) {
        @print("Floats equal!\n");
    }
    else {
        @print("Floats not equal\n");
    }

    alloc float f3 &long;
    let f3 = f1 as long float + 1234.56789 &long;
    alloc float result;
    let result = f1 * 30 as float + f2;

    // use the pow function
    alloc long int li;
    let li = @pow(5, 2);
    if (li = 25) {
        @print("Correct result from pow function\n");
    }
    else {
        @print("Incorrect result from pow function\n");
    }

    return to_return;
}
